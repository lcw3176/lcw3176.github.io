---
layout: post
title:  "Process"
date:   2022-11-16 16:25:42 +0900
categories:
---
# Process
## 정의
- 실행중인 프로그램
- 작업의 단위
- 독립된 실행 개체

## 세그먼트
### 스택
- 사용자 공간과 커널 공간의 경계에 위치, 제일 상단
- 함수 호출 시 파라미터, 지역 변수, 함수 리턴 주소 존재
### 힙
- 동적 할당 영역
### 데이터
- 전역 변수
### 텍스트 영역
- 명령, 함수 등으로 구성
- 가장 하위 공간


## 생명 주기
### New
- 프로세스 생성 중, 메모리 적재 안됨
### Ready
- 프로세스 실행 대기 상태, 메모리 적재 됨
### Running
- 프로세스 실행 상태
### Waiting, Block, Sleep
- 이벤트 발생 대기 (I/O 경쟁, Event Wait 등등)
### Terminated, Exit
- 실행 종료 

## Process <-> Thread
### Process
- 부모, 자식 서로 다른 주소 공간
- 고립, 결함이 전파되지 않음
### Thread
- 부모, 자식 같은 주소 공간
- 동시에 동작, 자원 공유에 적합


## PCB(Process Control Block) or TCD(Task Control Block)
### 정의
- 각 프로세서가 가져야 할 정보가 저장되는 블록
### 저장되는 정보
- PID
- 프로세스 상태 정보(생명주기)
- 프로그램 카운터 (컨텍스트)
- CPU 레지스터 (컨텍스트)
- CPU 스케줄링 정보
- 메모리 관리 정보
- 유저 계정 정보
- I/O 상태 정보

## Multi-Process
### 정의
- 여러개의 프로세스를 동시에 실행
- OS 스케줄러가 관리
    - 시분할 시스템
    - 스케줄링 큐
### Context Switch
- 문맥(=PCB) 교환
- 현재 프로세스의 상태를 저장하고
- cpu 코어를 다른 프로세스한테 넘김
- 상당한 오버헤드 발생
- timer 인터럽트
- I/O 요청 시스템 콜

## IPC
### 정의
- 프로세스간 통신
- 커널 영역에서 제공
### 메세지 전달
- 커널을 통해 통신, 메세지 큐 사용
- 송신 프로세스 Enqueue(), 수신 프로세스에서는 Dequeue();
- 메세지 큐는 커널에서 관리
    
