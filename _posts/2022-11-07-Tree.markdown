---
layout: post
title:  "Tree"
date:   2022-11-07 21:24:51 +0900
categories:
---
# tree

## 개요, 특징
- 그래프의 한 종류, 계층 모델
- 한 개의 루트 노드, 모든 자식 노드는 한 개의 부모 노드만을 가짐
- 순회 종류
    - Pre-order
    - In-order
    - Post-order
- 트리 종류
    - 이진 트리
    - 이진 탐색 트리
    - 전 이진 트리
    - 완전 이진 트리
    - 포화 이진 트리
    - 이진 힙

- 이진 트리
    - 트리의 한 종류
    - 각 노드가 최대 두 개의 자식을 갖는 트리
    - 중위 순회(In-order)
        - 왼쪽 가지 -> 현재 노드 -> 오른쪽 가지
    - 전위 순회(Pre-order)
        - 현재 노드 -> 왼쪽 가지 -> 오른쪽 가지
    - 후위 순회(Post-order)
        - 왼쪽 가지 -> 오른쪽 가지 -> 현재 노드

- 이진 탐색 트리
    - 각 노드 왼쪽 서브트리는 해당 노드 값보다 작은 값의 노드로 구성
    - 각 노드 오른쪽 서브트리는 해당 노드 값보다 큰 값의 노드로 구성
    - 중복된 노드 존재 x
    - 중위 순회 방식
    - 왼쪽 값 < 오른쪽 값

- 전 이진 트리
    - 모든 노드가 0개 또는 2개의 자식 노드를 갖는 트리

- 완전 이진 트리
    - 트리의 모든 높이에서 노드가 꽉 차 있는 트리
    - 마지막 레벨 제외하고 모든 레벨 다 차있음

- 포화 이진 트리
    - 전 이진 트리 이면서 완전 이진 트리
    - 모든 말단 노드는 같은 높이에 존재, 마지막 단계의 노드 개수 최대
    - 모든 내부 노드가 두 개의 자식 노드 존재
    - 모든 말단 노드가 동일한 깊이, 레벨 가짐

- 이진 힙
    - 최소 힙
        - 완전 이진 트리
        - 부모노드 <= 자식노드
    - 최대 힙
        - 완전 이진 트리
        - 부모노드 >= 자식노드

```python
class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


class BinaryTree:
    def __init__(self, root = None):
        self.root = root


    def push(self, value):
        node = Node(value)
        tempNode = self.root

        if self.root is None:
            self.root = node
            return
        else:
            ptrNode = self.root
            while ptrNode is not None:
                tempNode = ptrNode

                if node.value < ptrNode.value:
                    ptrNode = ptrNode.left
                else:
                    ptrNode = ptrNode.right
            
            if node.value < tempNode.value:
                tempNode.left = node
            else:
                tempNode.right = node


    def remove(self, value):
        temp = self.root
        self.pop(temp, value)


    def pop(self, node, value):
        if node is None:
            return -1
        elif node.value > value:
            node.left = self.pop(node.left, value)
        elif node.value < value:
            node.right = self.pop(node.right, value)
        else:
            temp = node

            if node.right is None and node.left is None:
                del node
                node = None
            elif node.right is None:
                node = node.left
                del temp
            elif node.left is None:
                del temp
            else:
                temp = self.search_max_node()
                node.value = temp.value
                node.left = self.pop(node.left, temp.value)

            return node


    def search_max_node(self):
        if self.root is None:
            return
        else:
            temp = self.root
            maxVal = 0
            while temp is not None:
                maxVal = temp
                temp = temp.right
            
            return maxVal

    
    def show(self):
        temp = self.root
        self.in_order(temp)


    def in_order(self, node):
        if node is not None:
            self.in_order(node.left)
            print(node.value, end=" ")
            self.in_order(node.right)

    
    def pre_order(self, node):
        if node is not None:
            print(node.value, end=" ")
            self.pre_order(node.left)
            self.pre_order(node.right)


    def post_order(self, node):
        if node is not None:
            self.post_order(node.left)
            self.post_order(node.right)
            print(node.value, end=" ")
```