---
layout: post
title:  "lambda, stream"
date:   2022-11-20 20:00:11 +0900
categories:
---
# lambda, stream
## lambda
- 메서드를 하나의 식으로 표현한 것
- 메시드의 이름 및 반환 값이 없어지므로 익명 함수라고도 부름
- 런타임시 익명 구현 객체 생성

## stream
### 개요
- 컬렉션, 배열등에 여러 함수를 조합, 원하는 결과 필터링 및 결과 도출 가능, 람다식과 자주 쓰임
- 간단하게 병렬처리가 가능

### 특징
- lazy함, 최종 연산 과정에 들어서면 이전 중간 연산들을 모두 합친 후 최종 연산에 돌입(https://93hong.tistory.com/2 참조)
- source로 파이프라인을 구성, 연산의 결과를 전달
- source를 수정하지 않고 연산의 결과를 생성해서 전달
- source를 저장하지 않음, 유한한 크기인 Collection에 비해 이점
- 한번 소비한(최종 연산을 수행한) 스트림은 다시 소비 불가

### for-loop vs Stream 속도 비교
#### '순회 비용 > 계산 비용'
- 일반적인 primitive type 처리 상황, 스택 접근 상황에서는 for-loop가 더 빠름
    - 컴파일러 최적화
    - JVM에서 직접 참조로 인한 빠른 속도 
- wrapped type 같은 간접 참조, 즉 힙을 참조해야 하는 상황에서는 큰 차이가 없음
    - 간접 참조 비용이 워낙 비싸서 컴파일러 최적화 이점이 사라짐

#### '순회 비용 < 계산 비용'
- 더 이상 for-loop와 stream의 차이가 확연하게 나지 않음
- 함수 내부의 시간 복잡도가 커질수록, stream이 for-loop 대비 속도 손실이 없어짐
