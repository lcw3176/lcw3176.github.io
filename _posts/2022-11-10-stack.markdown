---
layout: post
title:  "Stack"
date:   2022-11-10 10:00:07 +0900
categories: 
---
# Stack

## 개요, 특징
### 자료구조
* LIFO, 후입선출 구조
* 뒤로가기, 실행취소, 재귀 알고리즘, 괄호 검사, 후위 표기법 등등
### 메모리 구조
* 지역변수, 매개변수 저장
* 동적 생성된 클래스 주소 저장

## 장점
### 자료구조
* 삽입
    - O(1)
    - push() 메서드로 데이터 추가
* 삭제
    - O(1)
    - pop() 메서드로 삭제 및 인출

### 메모리 구조
- 접근 속도 빠름
- 메모리 해제 불필요 (free, 가비지 컬렉터 -> X)
- 할당, 해제에 따른 속도 저하 없음

## 단점
### 자료구조
* 탐색
    - 가장 최근 데이터로 하나씩 접근 가능
    - 만약 가운데 값만 빼고 싶다면 값 복사 -> 추출 -> 다시 삽입
    - 애초에 스택과 맞지 않는 목적
### 메모리 구조
- 크기 제한(os에 따른 설정)    

```python
class Stack:
    def __init__(self):
        self.lst = []


    def __len__(self):
        return len(self.lst)


    def __str__(self):
        return str(self.lst[::1])


    def push(self, data):
        self.lst.append(data)


    def pop(self):
        if self.isEmpty():
            raise Exception("Empty Stack")

        return self.lst.pop()


    def clear(self):
        self.lst.clear()


    def contains(self, data):
        if self.isEmpty():
            raise Exception("Empty Stack")
        
        if data in self.lst:
            return True

        return False


    def peek(self):
        if self.isEmpty():
            raise Exception("Empty Stack")
        
        return self.lst[-1]


    def isEmpty(self):
        if len(self.lst) == 0:
            return True
        return False


    def size(self):
        return len(self.lst)
```